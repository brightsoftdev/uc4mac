Index: XMPP.mm
===================================================================
--- XMPP.mm	(revision 103)
+++ XMPP.mm	(working copy)
@@ -15,6 +15,7 @@
 
 
 #include <gloox/client.h>
+#include <gloox/eventhandler.h>
 #include <gloox/rostermanager.h>
 #include <gloox/messagehandler.h>
 #include <gloox/presencehandler.h>
@@ -27,7 +28,28 @@
 #include <gloox/pubsubmanager.h>
 #include <gloox/messagesessionhandler.h>
 #include <gloox/messagesession.h>
+#include <gloox/message.h>
+#import <CommonCrypto/CommonDigest.h>
 
+// Function definition
+NSString * md5( NSString *str )
+{
+    const char *cStr = [str UTF8String];
+    unsigned char result[16];
+    CC_MD5( cStr, (unsigned int)strlen(cStr), result );
+    return [NSString 
+            stringWithFormat: @"%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X",
+            result[0], result[1],
+            result[2], result[3],
+            result[4], result[5],
+            result[6], result[7],
+            result[8], result[9],
+            result[10], result[11],
+            result[12], result[13],
+            result[14], result[15]
+            ];
+}
+
 @interface HandlerWrapper : NSObject {
 @private
     gloox::Presence* presence;
@@ -55,7 +77,7 @@
 @end
 
 
-class CXmpp:public gloox::PresenceHandler, gloox::ConnectionListener, gloox::VCardHandler, gloox::RosterListener, gloox::MessageSessionHandler //gloox::MessageHandler, 
+class CXmpp:public gloox::PresenceHandler, gloox::ConnectionListener, gloox::VCardHandler, gloox::MessageSessionHandler, gloox::RosterListener, gloox::EventHandler, gloox::LogHandler
 {
 public:
     static CXmpp& instance();
@@ -71,36 +93,45 @@
     void requestVcard(NSString* jid);
 //    gloox::Client* clientPtr() {return m_pClient;};
     void startChat(gloox::JID& jid);
+    void heartBeat();
+    void tgtExchange();
     void closeSession(gloox::MessageSession* pSession);
     
 protected:
-//    virtual void handleMessage( const gloox::Message& stanza,
-//                               gloox::MessageSession* session = 0 );
-    virtual void 	handlePresence (const gloox::Presence &presence);
     virtual void 	onConnect ();
     virtual void 	onDisconnect (gloox::ConnectionError e);
     virtual void 	onSessionCreateError (const gloox::Error *error);
-    virtual bool 	onTLSConnect (const gloox::CertInfo &info);
-    //    virtual void 	onResourceBind (const std::string &resource)
-    //    virtual void 	onResourceBindError (const Error *error)
-//    virtual void 	onStreamEvent (StreamEvent event)
+    virtual bool 	onTLSConnect (const gloox::CertInfo &info){return true;}
+    virtual void 	onResourceBind (const std::string &resource){};
+    virtual void 	onResourceBindError (const gloox::Error *error){};
+    virtual void 	onStreamEvent (gloox::StreamEvent event){};
     virtual void 	handleVCard (const gloox::JID &jid, const gloox::VCard *vcard);
-    virtual void 	handleVCardResult (gloox::VCardHandler::VCardContext context, const gloox::JID &jid, gloox::StanzaError se=gloox::StanzaErrorUndefined);
-
-    
+    virtual void 	handleVCardResult (gloox::VCardHandler::VCardContext context, const gloox::JID &jid, gloox::StanzaError se=gloox::StanzaErrorUndefined){};
     virtual void 	handleItemAdded (const gloox::JID &jid){};
     virtual void 	handleItemSubscribed (const gloox::JID &jid){};
     virtual void 	handleItemRemoved (const gloox::JID &jid){};
     virtual void 	handleItemUpdated (const gloox::JID &jid){};
-    virtual void 	handleItemUnsubscribed (const gloox::JID &jid){};
+    virtual void 	handleItemUnsubscribed (const gloox::JID &jid, const std::string&){};
     virtual void 	handleRoster (const gloox::Roster &roster);
-    virtual void 	handleRosterPresence (const gloox::RosterItem &item, const std::string &resource, gloox::Presence::PresenceType presence, const std::string &msg){};
-    virtual void 	handleSelfPresence (const gloox::RosterItem &item, const std::string &resource, gloox::Presence::PresenceType presence, const std::string &msg){};
+    virtual void 	handlePresence (const gloox::Presence &presence);
+    virtual void        handleMessageSession (gloox::MessageSession* session);
+    virtual void 	handleRosterPresence (const gloox::RosterItem &item, 
+                                          const std::string &resource, 
+                                          gloox::Presence::PresenceType presence, 
+                                          const std::string &msg){};
+    
+    virtual void 	handleSelfPresence (const gloox::RosterItem &item, 
+                                        const std::string &resource, 
+                                        gloox::Presence::PresenceType presence, 
+                                        const std::string &msg){};
+    
     virtual bool 	handleSubscriptionRequest (const gloox::JID &jid, const std::string &msg){return false;};
     virtual bool 	handleUnsubscriptionRequest (const gloox::JID &jid, const std::string &msg){return false;};
-    virtual void 	handleNonrosterPresence (const gloox::Presence &presence);
+    virtual void 	handleNonrosterPresence (const gloox::Presence &presence){};
+    virtual void    handleGatewayLogin(const std::string& domain){};
     virtual void 	handleRosterError (const gloox::IQ &iq);
-    virtual void 	handleMessageSession (gloox::MessageSession *session);
+    virtual void    handleEvent(const gloox::Event& event);
+    virtual void    handleLog(gloox::LogLevel level, gloox::LogArea area, const std::string &message);
 
 private:
     CXmpp();
@@ -111,10 +142,12 @@
     gloox::VCardManager* m_pVcardManager;
     XMPP* m_pDelegage;
     gloox::util::Mutex  m_delegateMutex;
-    
-    
+    std::string tgt;
 };
 
+#pragma mark -
+#pragma mark *** public functions ***
+
 CXmpp::CXmpp()
 :m_pClient(0),
 m_pDelegage(0),
@@ -128,10 +161,8 @@
 CXmpp::~CXmpp()
 {
     disconnect();
-    
     delete m_pClient;
     m_pClient = 0;
-    
     NSLog(@"class CXmpp destoried");
 }
 
@@ -154,7 +185,6 @@
             if (m_pRosterManager) {
                 m_pRosterManager->removeRosterListener();
             }
-//            delete m_pRosterManager;
             delete m_pClient;
             m_pClient=0;
             m_pRosterManager = 0;
@@ -162,22 +192,44 @@
     }
 }
 
+void CXmpp::heartBeat(){
+    while(true){
+        NSLog(@"heart beat");
+        gloox::JID* jid = new gloox::JID();
+        jid->setServer("uc.sina.com.cn");
+        m_pClient->xmppPing(*jid, this);
+        delete jid;
+        sleep(60);
+    }
+}
+
+void CXmpp::tgtExchange()
+{
+    while (true) {
+        sleep(5);
+    }
+}
+
 bool CXmpp::setLoginInfo(NSString* loginId, NSString* password)
 {
     delete m_pClient;
     delete m_pVcardManager;
     
-    gloox::JID jid([[loginId stringByAddingPercentEscapesUsingEncoding:NSASCIIStringEncoding] cStringUsingEncoding:NSASCIIStringEncoding]);
-    m_pClient = new gloox::Client(jid, [[password stringByAddingPercentEscapesUsingEncoding:NSASCIIStringEncoding] cStringUsingEncoding:NSASCIIStringEncoding]);
-//    m_pClient->registerMessageHandler( this );
+    gloox::JID* jid = new gloox::JID();
+    jid->setServer("uc.sina.com.cn");
+    tgt = [md5([NSString stringWithFormat:@"%@%@", loginId, password]) UTF8String];
+    loginId = [loginId stringByReplacingOccurrencesOfString:@"@"
+                                         withString:@"\\40"];
+    jid->setUsername([loginId UTF8String]);
+    m_pClient = new gloox::Client(*jid, [password UTF8String]);
     m_pClient->registerPresenceHandler( this );
     m_pClient->registerConnectionListener( this );
+    m_pClient->logInstance().registerLogHandler( gloox::LogLevelDebug, gloox::LogAreaAll, this );
     m_pRosterManager = m_pClient->rosterManager();
     m_pRosterManager->registerRosterListener(this, false);
     m_pRosterManager->fill();
     m_pVcardManager = new gloox::VCardManager(m_pClient);
     m_pPubSubManager = new gloox::PubSub::Manager(m_pClient);
-    m_pClient->registerMessageSessionHandler( this );
 
     return true;
     
@@ -190,10 +242,8 @@
 
 void CXmpp::requestVcard(NSString* jid)
 {
-    if (!m_pVcardManager) {
-        return;
-    }
-    
+    if (!m_pVcardManager) { return; }
+
     gloox::JID id([jid UTF8String]);
     
     m_pVcardManager->fetchVCard(id, this);
@@ -202,20 +252,13 @@
 
 void CXmpp::startChat(gloox::JID& jid)
 {
-    if (!m_pClient) {
-        return;
-    }
+    if (!m_pClient) { return; }
     
     gloox::MessageSession* pSession = new gloox::MessageSession( m_pClient, jid );
     XMPPSession* session = [[XMPPSession alloc]init];
     [session setSession:pSession];
     [session setXmpp:m_pDelegage];
     [[m_pDelegage sessionManager]addSession:session];
-    
-    /////////////////////////////////
-    // Do NOT relese session here!
-    /////////////////////////////////
-    
 }
 
 void CXmpp::closeSession(gloox::MessageSession* pSession)
@@ -224,8 +267,6 @@
 }
 
 #pragma mark -
-
-
 #pragma mark *** ConnectionListener ***
 void 	CXmpp::onConnect ()
 {
@@ -235,11 +276,9 @@
         m_delegateMutex.unlock();
         return;
     }
+    
     [m_pDelegage performSelectorOnMainThread:@selector(onConnect:) withObject:nil waitUntilDone:NO];
     m_delegateMutex.unlock();
-    
-
-    
 }
 
 void 	CXmpp::onDisconnect (gloox::ConnectionError e)
@@ -286,25 +325,20 @@
     
 }
 
-bool 	CXmpp::onTLSConnect (const gloox::CertInfo &info)
-{
-    return true;
-}
 #pragma mark -
-
 #pragma mark *** VCard Handlers ***
-
 void 	CXmpp::handleVCard (const gloox::JID &jid, const gloox::VCard *vcard)
 {
-    if (!jid.bare().length()) {
+    if (!vcard) {
         return;
     }
+    
     m_delegateMutex.lock();
     if (!m_pDelegage) {
         m_delegateMutex.unlock();
         return;
     }
-    
+
     ContactItem* item = [[ContactItem alloc]init];
     [item setVcard:YES];
     [item setJid:[NSString stringWithUTF8String:jid.bare().c_str()]];
@@ -313,6 +347,11 @@
         NSData* imageData = [NSData dataWithBytes:vcard->photo().binval.c_str() length:vcard->photo().binval.size()];
         [item setPhoto:imageData];
         [imageData release];
+    }else{
+        NSURL* url = [NSURL URLWithString:[NSString stringWithUTF8String:vcard->photo().extval.c_str()]];
+        NSData *imageData = [NSData dataWithContentsOfURL:url];
+        [item setPhoto:imageData];
+        [imageData release];
     }
     [item setName:[NSString stringWithUTF8String:vcard->formattedname().c_str()]];
     
@@ -320,13 +359,8 @@
     
     m_delegateMutex.unlock();
 }
-void 	CXmpp::handleVCardResult (gloox::VCardHandler::VCardContext context, const gloox::JID &jid, gloox::StanzaError se)
-{
-    
-}
 
 #pragma mark -
-
 #pragma mark *** RosterListener ***
 void 	CXmpp::handleRoster (const gloox::Roster &roster)
 {
@@ -342,16 +376,17 @@
     NSMutableArray* contacts = [[NSMutableArray alloc ]initWithCapacity:pRoster->size()];
     for (it = pRoster->begin(); it != pRoster->end(); it++) {
         NSString* strKey = [NSString stringWithUTF8String:(*it).first.c_str()];
+        
         gloox::RosterItem* pItem = (*it).second;
         NSString* strJid = [NSString stringWithUTF8String:pItem->jid().c_str()];
         
         NSMutableArray* groups = [[NSMutableArray alloc]init ];
         gloox::StringList list(pItem->groups());
-        gloox::StringList::iterator it;
-        for (it = list.begin(); it != list.end(); it++)
-        {
-            [groups addObject:[NSString stringWithUTF8String:(*it).c_str()]];            
+        gloox::StringList::iterator group;
+        for (group = list.begin(); group != list.end(); group++) {
+            [groups addObject:[NSString stringWithUTF8String:(*group).c_str()]];            
         }
+        
         NSString* strName = [NSString stringWithUTF8String:pItem->name().c_str()];
         BOOL online = pItem->online();
         
@@ -369,19 +404,36 @@
     m_delegateMutex.unlock();
 }
 
-void 	CXmpp::handleNonrosterPresence (const gloox::Presence &presence)
-{
-
-}
 void 	CXmpp::handleRosterError (const gloox::IQ &iq)
-{
-    
+{    
+    NSLog(@"Roster Error");
 }
-#pragma mark -
 
+#pragma mark-
+#pragma mark *** Event Handler ***
+void    CXmpp::handleEvent (const gloox::Event &event) {
+    std::string sEvent;  
+    switch (event.eventType())  
+    {  
+        case gloox::Event::PingPing:   //! 收到PING消息  
+            sEvent = "PingPing";  
+            break;  
+        case gloox::Event::PingPong:   //! 收到返回PONG消息,心跳累计次数减1  
+            sEvent = "PingPong";  
+            //decreaceHeartBeatCount();  
+            break;  
+        case gloox::Event::PingError:  //!   
+            sEvent = "PingError";  
+            break;  
+        default:  
+            break;  
+    }  
+    return; 
+}
 
-#pragma mark *** Message Handlers ***
-void 	CXmpp::handleMessageSession (gloox::MessageSession *session)
+#pragma mark -
+#pragma mark *** Message Hander ***
+void 	CXmpp::handleMessageSession(gloox::MessageSession *session)
 {
     XMPPSession* s = [[XMPPSession alloc]init];
     [s setSession:session];
@@ -390,31 +442,9 @@
     [[m_pDelegage sessionManager] performSelectorOnMainThread:@selector(addSession:) withObject:s waitUntilDone:YES];
 }
 
-/*
-void CXmpp::handleMessage( const gloox::Message& stanza,
-                          gloox::MessageSession* session )
-{
-    m_delegateMutex.lock();
-    if( !m_pDelegage )
-    {
-        m_delegateMutex.unlock();
-        return;
-    }
 
-    
-    HandlerWrapper* wrapper = [[HandlerWrapper alloc]init];
-        
-    [wrapper setMessage:(gloox::Message*)&stanza];
-    [wrapper setSession:session];
-    [m_pDelegage performSelectorOnMainThread:@selector(handleMessage:) withObject:wrapper waitUntilDone:NO];
-    m_delegateMutex.unlock();
-}
-*/
-
 #pragma mark -
-
 #pragma mark *** Presence Handlers ***
-
 void 	CXmpp::handlePresence (const gloox::Presence &presence)
 {
     m_delegateMutex.lock();
@@ -429,17 +459,21 @@
     [item setFullJid:[NSString stringWithUTF8String:presence.from().full().c_str()]];
     [item setStatus:[NSString stringWithUTF8String:presence.status().c_str()]];
     [item setPresence:presence.subtype()];
-//    [item setOnline:YES];
-//     [item setVcard:YES];
+    //[item setOnline:YES];
+    //[item setVcard:YES];
     
     [m_pDelegage performSelectorOnMainThread:@selector(updateContact:) withObject:item waitUntilDone:NO];
     m_delegateMutex.unlock();
     
 }
 
+#pragma mark -
+#pragma mark *** Log Handler ***
+void    CXmpp::handleLog(gloox::LogLevel level, gloox::LogArea area, const std::string &message){
+    printf("log: level: %d, area: %d, %s\n", level, area, message.c_str());
+}
 
 #pragma mark -
-
 #pragma mark *** XMPPThread ***
 @interface XMPPThread : NSThread {
 @private
@@ -447,7 +481,6 @@
 @end
 
 @implementation XMPPThread
-
 - (id)init
 {
     self = [super init];
@@ -466,16 +499,81 @@
 
 - (void)main
 {
-    NSLog(@"XMPP thread started");
+    NSLog(@"XMPPThread started");
     NSAutoreleasePool* pool = [[NSAutoreleasePool alloc]init];
     CXmpp::instance().connect();
-    NSLog(@"XMPP thread ended");
+    NSLog(@"XMPPThread ended");
     [pool release];
 }
+@end
 
+#pragma mark -
+#pragma mark *** HeartBeatThread ***
+@interface HeartBeatThread : NSThread {
+@private
+}
 @end
+
+@implementation HeartBeatThread
+- (id)init
+{
+    self = [super init];
+    if (self) {
+        NSLog(@"HeartBeatThread initialized");
+    }
+    return self;
+}
+
+- (void)dealloc
+{
+    [super dealloc];
+    NSLog(@"HeartBeatThread destroyed");
+}
+
+- (void)main
+{
+    NSLog(@"HeartBeatThread started");
+    NSAutoreleasePool* pool = [[NSAutoreleasePool alloc]init];
+    CXmpp::instance().heartBeat();
+    NSLog(@"HeartBeatThread ended");
+    [pool release];
+}
+@end
+
 #pragma mark -
+#pragma mark *** TGTThread ***
+@interface TGTThread : NSThread {
+@private
+}
+@end
 
+@implementation TGTThread
+- (id)init
+{
+    self = [super init];
+    if (self) {
+        NSLog(@"TGTThread initialized");
+    }
+    return self;
+}
+
+- (void)dealloc
+{
+    [super dealloc];
+    NSLog(@"TGTThread destroyed");
+}
+
+- (void)main
+{
+    NSLog(@"TGTThread started");
+    NSAutoreleasePool* pool = [[NSAutoreleasePool alloc]init];
+    CXmpp::instance().tgtExchange();
+    NSLog(@"TGTThread ended");
+    [pool release];
+}
+@end
+
+#pragma mark -
 #pragma mark *** XMPP Implementation ***
 @implementation XMPP
 @synthesize rosterDelegate;
@@ -498,7 +596,8 @@
 //    [self disconnect];
     CXmpp::instance().setDelegate(nil);
     [connectionDelegates release];
-    [thread release];
+    [xmppThread release];
+    [heartBeatThread release];
     [super dealloc];
     NSLog(@"XMPP destroyed");
 }
@@ -511,10 +610,10 @@
 
 - (BOOL) isFinished
 {
-    if (!thread) {
+    if (!xmppThread) {
         return YES;
     }
-    return [thread isFinished];
+    return [xmppThread isFinished];
 }
 
 - (void) registerConnectionDelegate:(id < XMPPConnectionDelegate >) connectionDelegate
@@ -531,33 +630,43 @@
 {
     CXmpp::instance().setDelegate(self);
     CXmpp::instance().setLoginInfo(loginId, password);
-    if (thread) {
-        if ([thread isExecuting])
+    if (xmppThread) {
+        if ([xmppThread isExecuting])
         {
             [NSException raise:@"Cannot do login process" format:@"Thread is already running"];
             return NO;
         }
     }
-    [thread release];
-    thread = [[XMPPThread alloc]init];
-    [thread start];
+    [xmppThread release];
+    xmppThread = [[XMPPThread alloc]init];
+    [xmppThread start];
+    
+    if (heartBeatThread) {
+        if ([heartBeatThread isExecuting])
+        {
+            [NSException raise:@"Cannot do heart beat process" format:@"Thread is already running"];
+            return NO;
+        }
+    }
+    [heartBeatThread release];
+    heartBeatThread = [[HeartBeatThread alloc]init];
+    [heartBeatThread start];
+    
     return YES;
 }
 
 - (void) disconnect
 {
     CXmpp::instance().disconnect();
-    while ([thread isExecuting]) {
+    while ([xmppThread isExecuting]) {
         sleep(10);
     }
-    [thread release];
-    thread = nil;
+    [xmppThread release];
+    xmppThread = nil;
     
     CXmpp::instance().setDelegate(nil);
     
 }
-
-
 #pragma mark -
 
 - (void) startChat:(NSString*)jid
@@ -567,7 +676,6 @@
     }
     gloox::JID glooxJid([jid UTF8String]);
     CXmpp::instance().startChat(glooxJid);
-    
 }
 
 #pragma mark *** XMPP callback handlers ***
@@ -578,8 +686,24 @@
     while ((connectionDelegate = [e nextObject])) {
         [connectionDelegate onConnect];
     }
+        
+    if (tgtThread) {
+        if ([tgtThread isExecuting])
+        {
+            [NSException raise:@"Cannot do tgt exchange process" format:@"Thread is already running"];
+            return;
+        }
+    }
+    [tgtThread release];
+    tgtThread = [[TGTThread alloc]init];
+    [tgtThread start];
 }
 
+
+- (void) handleMessage:( HandlerWrapper* ) wrapper
+{
+}
+
 - (void) onDisconnect: (NSString*) errorString
 {
     gloox::ConnectionError error = (gloox::ConnectionError)[errorString intValue];
@@ -592,11 +716,6 @@
     [errorString release];
 }
 
-- (void) handleMessage:( HandlerWrapper* ) wrapper
-{
-    
-}
-
 - (void) updateContact:( ContactItem* ) item;
 {
     if (!rosterDelegate) {
@@ -621,17 +740,13 @@
     for (ContactItem* contact in contacts) {
         [rosterDelegate onRoster:contact];
         if (![contact vcard]) {
-            CXmpp::instance().requestVcard([contact fullJid]);
+            CXmpp::instance().requestVcard([contact jid]);
         }
     }
     [contacts release];
     
 }
-
-
-
 #pragma mark -
-
 - (void) close:(XMPPSession*) session
 {
     CXmpp::instance().closeSession([session session]);
